trigger:
  branches:
    exclude:
      - pre-commit/*
pr:
  - main

jobs:
  - job: Linux
    strategy:
      matrix:
        ubuntuDefault:
          containerImage: 'helics/buildenv:ubuntu20.04-default-builder'
          test_config: 'ci'
        gcc8:
          containerImage: 'helics/buildenv:gcc8-builder'
          test_config: 'ci'
        clang13:
          containerImage: 'helics/buildenv:clang13-builder'
          test_config: 'ci'
        clang7:
          containerImage: 'helics/buildenv:clang7-builder'
          test_config: 'ci'

    pool:
      vmImage: 'ubuntu-latest'
    container: $[ variables['containerImage'] ]
    timeoutInMinutes: 60

    steps:
      - bash: |
          unset VCPKG_ROOT
          mkdir -p build && cd build
          ../scripts/ci-build.sh
        env:
          MAKEFLAGS: '-j 4'
          CMAKE_GENERATOR: 'Unix Makefiles'
        displayName: 'Build HELICS_FMI'

      - bash: ../scripts/run-ci-tests.sh "$TEST_CONFIG"
        env:
          TEST_CONFIG: $[variables['test_config']]
        workingDirectory: 'build'
        displayName: 'Test HELICS_FMI'

  - job: macOS
    strategy:
      matrix:
        XCode-latest:
          test_config: 'ci'
          vmImage: 'macOS-12'
        XCode-oldest:
          test_config: 'ci'
          vmImage: 'macOS-11'
          xcode_path: '/Applications/Xcode_11.7.app'
    pool:
      vmImage: $[ variables['vmImage'] ]
    timeoutInMinutes: 60

    steps:
      - bash: sudo xcode-select --switch "${XCODE_PATH}/Contents/Developer"
        env:
          XCODE_PATH: $[variables['xcode_path']]
        displayName: 'Set XCode Path'
        condition: ne(variables['xcode_path'],'')
      - bash: |
          unset VCPKG_ROOT
          mkdir -p build && cd build
          ../scripts/ci-build.sh
        env:
          MAKEFLAGS: '-j 4'
          CMAKE_GENERATOR: 'Unix Makefiles'
        displayName: 'Build HELICS_FMI'

      - bash: ../scripts/run-ci-tests.sh "$TEST_CONFIG"
        env:
          TEST_CONFIG: $[variables['test_config']]
        workingDirectory: 'build'
        displayName: 'Test HELICS_FMI'

  - job: Windows
    strategy:
      matrix:
        VS2019-32bit:
          imageName: 'windows-2019'
          langArch: 'x86'
          vsArch: 'Win32'
          extraFlags: '-DHELICS_DISABLE_WEBSERVER=ON'
        VS2019-64bit:
          imageName: 'windows-2019'
          langArch: 'x64'
          vsArch: 'x64'
          extraFlags: ''
        VS2022-64bit:
          imageName: 'windows-2022'
          langArch: 'x64'
          vsArch: 'x64'
          extraFlags: '-DCMAKE_CXX_STANDARD=20'

    pool:
      vmImage: $(imageName)
    variables:
      BOOST_ROOT: $(Pipeline.Workspace)/ci-libs/boost
      BOOST_URL: https://sourceforge.net/projects/boost/files/boost/1.76.0/boost_1_76_0.tar.bz2/download

    steps:
      # -----------------------
      # Install dependencies
      # -----------------------
      - task: Cache@2
        inputs:
          path: $(BOOST_ROOT)
          key: boost
          cacheHitVar: BOOST_CACHE_RESTORED
        displayName: Restore Boost cache
      - bash: |
          cd $(mktemp -d)
          curl --location --output "download.tar.bz2" "$BOOST_URL"
          tar xfj "download.tar.bz2"
          mkdir -p "$BOOST_ROOT"
          cp -r boost_*/* "$BOOST_ROOT"
        condition: ne(variables.BOOST_CACHE_RESTORED, 'true')
        displayName: Install Boost

      # -----------------------
      # Configure HELICS_FMI
      # -----------------------
      - bash: |
          echo "BOOST_ROOT=$BOOST_ROOT"
          env
        displayName: Show environment info
      - task: CMake@1
        inputs:
          cmakeArgs: -A $(vsArch) -DHELICS_FMI_BUILD_TESTS=ON -DHELICS_ZMQ_FORCE_SUBPROJECT=ON  -DHELICS_FMI_FORCE_HELICS_SUBPROJECT=ON -DHELICS_DISABLE_VCPKG=ON $(extraFlags) ..
        displayName: 'Configure HELICS_FMI'
        condition: eq( variables['Agent.OS'], 'Windows_NT' )

      # -----------------------
      # Build HELICS_FMI
      # -----------------------
      - bash: cmake --build . --config Release
        displayName: 'Build HELICS_FMI'
        workingDirectory: build

      # -----------------------
      # Test HELICS_FMI
      # -----------------------
      - bash: ctest --output-on-failure --timeout 480 -C Release
        displayName: 'Test HELICS_FMI'
        workingDirectory: build

      # For debugging, can get build folder contents by adding PublishBuildArtifacts task and set pathtoPublish: '$(Build.SourcesDirectory)/build'
